{"version":3,"sources":["redux/operations/contactsOperation.js","components/ContactForm/ContactForm.js","redux/selectors/contactsSelectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/ContactsPage.js"],"names":["axios","defaults","baseURL","addContacts","name","number","dispatch","contactsAction","addContactsRequest","post","then","response","addContactsSuccess","id","data","catch","error","addContactsError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","Object","keys","map","key","fetchContactsError","removeContact","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","ContactForm","state","handleInput","e","target","value","setState","handleSubmit","preventDefault","props","onAddContacts","onSubmit","this","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","getContactItems","contacts","items","getValueFilter","filter","getLoading","loading","getAlert","alert","getContactList","createSelector","contact","toLowerCase","includes","onRemoveContact","contactsSelectors","TransitionGroup","component","CSSTransition","timeout","classNames","onClick","Filter","onInputFilter","addFilter","ContactsPage","onFetchContacts","length","isLoadingContacts","isAlertContacts"],"mappings":"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","file":"static/js/3.2a3e7321.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport contactsAction from '../actions/contactsAction';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst addContacts = (name, number) => dispatch => {\r\n  dispatch(contactsAction.addContactsRequest());\r\n  axios\r\n    .post('/contacts', {\r\n      name,\r\n      number,\r\n    })\r\n    .then(response => {\r\n      // console.log('response addContacts:', response.data);\r\n      dispatch(\r\n        contactsAction.addContactsSuccess({\r\n          name,\r\n          number,\r\n          id: response.data.id,\r\n        }),\r\n      );\r\n    })\r\n    .catch(error => dispatch(contactsAction.addContactsError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsAction.fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(response => {\r\n      // console.log('response fetchContacts:', response.data);\r\n      dispatch(\r\n        contactsAction.fetchContactsSuccess(\r\n          Object.keys(response.data).map(key => ({\r\n            ...response.data[key],\r\n          })),\r\n        ),\r\n      );\r\n    })\r\n    .catch(error => dispatch(contactsAction.fetchContactsError(null)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsAction.removeContactsRequest());\r\n  // console.log('id revCont', id);\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsAction.removeContactsSuccess(id)))\r\n    .catch(error => dispatch(contactsAction.removeContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  addContacts,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from 'react';\n// import { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport contactsOperation from '../../redux/operations/contactsOperation';\nimport PropTypes from 'prop-types';\nimport './contactform.css';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.number,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleInput = e => {\n    const { name, value } = e.target;\n    this.setState(() => {\n      return {\n        [name]: value,\n      };\n    });\n  };\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    e.preventDefault();\n    this.props.onAddContacts(name, number);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        {/* <CSSTransition in={true} appear timeout={500} classNames=\"Logo\"> */}\n        <h1>Phonebook</h1>\n        {/* </CSSTransition> */}\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleInput}\n              name=\"name\"\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              value={this.state.number}\n              onChange={this.handleInput}\n              name=\"number\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onAddContacts: contactsOperation.addContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getContactItems = state => state.contacts.items;\r\n\r\nconst getAlert = state => state.contacts.alert;\r\n\r\nconst getValueFilter = state => state.contacts.filter;\r\n\r\nconst getContactList = createSelector(\r\n  [getContactItems, getValueFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\n// const getContactList = (state) =>\r\n//   state.contacts.items.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n//   );\r\n\r\nexport default {\r\n  getLoading,\r\n  getContactItems,\r\n  getAlert,\r\n  getValueFilter,\r\n  getContactList,\r\n};\r\n","import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nimport contactsOperation from \"../../redux/operations/contactsOperation\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nimport \"./ContactList.css\";\n\nfunction ContactList({ contacts, onRemoveContact }) {\n  return (\n    <div>\n      <TransitionGroup component=\"ul\">\n        {contacts.map((contact) => (\n          <CSSTransition key={contact.id} timeout={250} classNames=\"contacts\">\n            <li>\n              {\" \"}\n              {contact.name}: {contact.number}\n              <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\n                x\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContactList(state),\n});\n\nconst mapDispatchToProps = {\n  onRemoveContact: contactsOperation.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsAction from \"../../redux/actions/contactsAction\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nclass Filter extends Component {\n  static propTypes = {\n    filter: PropTypes.string,\n  };\n\n  handleInput = (e) => {\n    this.props.onInputFilter(e.target.value);\n  };\n  render() {\n    return (\n      <div>\n        <h3>Find contacts by name</h3>\n        <input type=\"text\" onChange={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  value: contactsSelectors.getValueFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onInputFilter: contactsAction.addFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\r\n\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperation from '../../src/redux/operations/contactsOperation';\r\nimport contactsSelectors from '../../src/redux/selectors/contactsSelectors';\r\n// import authSelectors from '../redux/selectors/authSelectors';\r\n\r\nexport class ContactsPage extends Component {\r\n  componentDidMount() {\r\n    // if (!this.props.isLogin) {\r\n    //   this.props.history.replace('/login');\r\n    //   return;\r\n    // }\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  // componentDidUpdate() {\r\n  //   if (!this.props.isLogin) {\r\n  //     this.props.history.replace('/login');\r\n  //     return;\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <h1>ContactsPage</h1> */}\r\n        <ContactForm />\r\n        {this.props.contacts.length > 0 ? (\r\n          <Filter />\r\n        ) : (\r\n          <h2>Contact list is empty! Please add contact!</h2>\r\n        )}\r\n        {this.props.isLoadingContacts && <h1>Loading contacts......</h1>}\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n  contacts: contactsSelectors.getContactItems(state),\r\n  isAlertContacts: contactsSelectors.getAlert(state),\r\n  // isLogin: authSelectors.isLogin(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperation.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n"],"sourceRoot":""}